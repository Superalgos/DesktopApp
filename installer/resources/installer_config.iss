; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Superalgos"
#define MyAppVersion "1.30"
#define MyAppPublisher "Superalgos"
#define MyAppURL "https://www.superalgos.org"
#define MyAppIcon ".\icon.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{FF378796-5FF9-4B3C-A29A-F4E48C9A40A5}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=..\
OutputBaseFilename=superalgos
SetupIconFile={#MyAppIcon}
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Files]
Source: "clone_superalgos.bat"; DestDir: "{app}"; Flags: deleteafterinstall

[Uninstall]
UninstallDisplayName={#MyAppName}
UninstallDisplayIcon={app}\{#MyAppIcon}
UninstallFilesDir={app}
UninstallLogMode=Append

[InstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
var
  GithubPage: TInputQueryWizardPage;

procedure InitializeWizard;
begin
  GithubPage := CreateInputQueryPage(wpWelcome,
    'Github information', 'This information is needed to proper clone and initialize the Superalgos repository. Make sure that you have already forked a Superalgos repository before continue.', '');
  GithubPage.Add('Github username:', False);
  GithubPage.Add('Github personal access token:', False);
end;

// Helper function to support both 32 and 64 bit Windows
// https://stackoverflow.com/questions/4429554/inno-setup-regkeyexists-on-64-bit-systems
function GetHKLM(): Integer;
begin
  if IsWin64 then
    Result := HKLM64
  else
    Result := HKLM32;
end;

function OnDownloadProgress(const Url, Filename: string; const Progress, ProgressMax: Int64): Boolean;
begin
  if ProgressMax <> 0 then
    Log(Format('  %d of %d bytes done.', [Progress, ProgressMax]))
  else
    Log(Format('  %d bytes done.', [Progress]));
  Result := True;
end;

function IsGitInstalled(): Boolean;
var
  gitPath: String;
begin
  Result := False;
  if not RegQueryStringValue(GetHKLM(), 'SOFTWARE\GitForWindows', 'InstallPath', gitPath) then
  begin
    Exit;
  end;
  Result := DirExists(gitPath);
end;

function InstallGit(): Boolean;
var
  ResultCode: Integer;
  InstallerUrl: String;
begin
  MsgBox('Git is not installed on this computer. It will be downloaded and installed now', mbConfirmation, MB_OK)
  begin
    if IsWin64 then
      InstallerUrl := 'https://github.com/git-for-windows/git/releases/download/v2.40.1.windows.1/Git-2.40.1-64-bit.exe'
    else
      InstallerUrl := 'https://github.com/git-for-windows/git/releases/download/v2.40.1.windows.1/Git-2.40.1-32-bit.exe';

    // Download the Git installer to the user's temp directory
    DownloadTemporaryFile(InstallerUrl, 'gitinstaller.exe', '', @OnDownloadProgress);
    if not Exec(ExpandConstant('{tmp}\gitinstaller.exe'), '/NORESTART', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      Result := False;
      Exit;
    end;
  end;
  Result := True;
  Log('Git installed successfully');
end;

function IsNodejsInstalled(): Boolean;
var
  NodejsPath: String;
begin
  Result := False;
  if not RegQueryStringValue(GetHKLM(), 'SOFTWARE\Node.js', 'InstallPath', NodejsPath) then
  begin
    Exit;
  end;
  Result := DirExists(NodejsPath);
end;

function InstallNodejs(): Boolean;
var
  ResultCode: Integer;
  InstallerUrl: String;
begin
  MsgBox('Node.js is not installed on this computer. It will be downloaded and installed now', mbConfirmation, MB_OK)
  begin
    if IsWin64 then
      InstallerUrl := 'https://nodejs.org/dist/v18.16.0/node-v18.16.0-x64.msi'
    else
      InstallerUrl := 'https://nodejs.org/dist/v18.16.0/node-v18.16.0-x86.msi';

    // Download the Node.js installer to the user's temp directory
    DownloadTemporaryFile(InstallerUrl, 'nodeinstaller.msi', '', @OnDownloadProgress);
    if not Exec(ExpandConstant('{sys}\msiexec.exe'), '/i "' + ExpandConstant('{tmp}\nodeinstaller.msi'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      Result := False;
      Exit;
    end;
  end;
  Result := True;
  Log('Node.js installed successfully');
end;

function InstallSuperalgosRepository(): Boolean;
var
  GitPath: String;
  NodejsPath: String;
  Command: String;
  ErrorCode: Integer;
begin
  RegQueryStringValue(GetHKLM(), 'SOFTWARE\GitForWindows', 'InstallPath', GitPath);
  RegQueryStringValue(GetHKLM(), 'SOFTWARE\Node.js', 'InstallPath', NodejsPath);
  Command := '/C ' + ExpandConstant('{app}') + '\clone_superalgos.bat ' + ExpandConstant('{app}') + ' "' + GitPath + '" ' + GithubPage.Values[0] + ' "' + NodejsPath + '" ' + GithubPage.Values[1];
  if Exec('cmd.exe', Command, '', SW_SHOW, ewWaitUntilTerminated, ErrorCode) then
  begin
    Log('Superalgos repository cloned');
    Result := True;
  end
  else
  begin
    MsgBox('Failed to clone Superalgos repository. Setup will now exit.', mbError, MB_OK);
    Result := False;
    Exit;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then
  begin
    // Check if Git is installed during the "Preparing to Install" step
    if not IsGitInstalled() then
    begin
      // Git is not installed, download and install it
      InstallGit();
    end;
    
    // Check if Node.js is installed during the "Preparing to Install" step
    if not IsNodejsInstalled() then
    begin
      // Node.js is not installed, download and install it
      InstallNodejs();
    end;
  end;
  if CurStep = ssPostInstall then
  begin
    InstallSuperalgosRepository();
  end;
end;

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

